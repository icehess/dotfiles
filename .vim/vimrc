"           _
"    __   _(_)_ __ ___  _ __ ___
"    \ \ / / | '_ ` _ \| '__/ __|
"  _  \ V /| | | | | | | | | (__
" |_|  \_/ |_|_| |_| |_|_|  \___|
"
" Icehess .vimrc file
" (Based on Ian's vimrc - https://github.com/statico/dotfiles)
" (https://statico.github.io/vim3.html)
"

set encoding=utf-8
scriptencoding utf-8
" nvim is always nocompatible
" set nocompatible               " be iMproved
filetype off                   " required!

" ----------------------------------------------------------------------------
"  Plug-ins
" ----------------------------------------------------------------------------

" set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/bundle')

" VCS
" Plug 'tpope/vim-fugitive'
" Plug 'airblade/vim-gitgutter'

 " Dev Utilities
" Plug 'mileszs/ack.vim' " First configure to us ag
" Plug 'junegunn/fzf' " file, command, history fuzzy searcher
" Plug 'junegunn/fzf.vim' " file, command, history fuzzy searcher (required both plug-ins)
" Plug 'haya14busa/incsearch.vim' " incrementally highlights ALL pattern matches unlike default 'incsearch'
" Plug 'scrooloose/nerdcommenter' " in command mode use ,cc ,cu
" Plug 'ervandew/supertab' " Use Tab to completion in insert mode
" Plug 'qpkorr/vim-bufkill' " Kill buffer withou closing win: :BUN :BD :BW and :BB
" Plug 'tpope/vim-commentary' " in command mode use gcc
" Plug 'tpope/vim-surround' " add: ysw' remove: ds' change: cs}]

" Plug 'liuchengxu/vim-which-key'

" Plug 'scrooloose/nerdtree'
" Plug 'Xuyuanp/nerdtree-git-plugin'
" Plug 'valloric/vim-indent-guides'
" Plug 'tpope/vim-repeat'
" Plug 'tpope/vim-unimpaired'

" " Syntaxes and such.
" Plug 'sheerun/vim-polyglot'

" " Look and feel
Plug 'cocopon/iceberg.vim'

" Plug 'itchyny/lightline.vim'

" All of your Plugins must be added before the following line
call plug#end()            " required
"filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" ----------------------------------------------------------------------------
"  General Configurations
" ----------------------------------------------------------------------------

syntax enable
set background=dark

" enable project specific config file in secure way(?)
" (use vim-addon-local-vimrc plugin and put .settings in tour project folder instead)
" set exrc
" set secure

set autoindent                                   " Carry over indenting from previous line
set autoread                                     " Don't bother me hen a file changes
set backspace=indent,eol,start                   " Allow backspace beyond insertion point
set cindent                                      " Automatic program indenting
set cinkeys-=0#                                  " Comments don't fiddle with indenting
set cinoptions=                                  " See :h cinoptions-values
set commentstring=\ \ #%s                        " When folds are created, add them to this
set copyindent                                   " Make autoindent use the same chars as prev autoindented line
set cursorline                                   " Highlight current line
set directory-=/tmp                              " Don't store temp files in cwd
set expandtab                                    " No tabs
set fileformats=unix,dos,mac                     " Prefer Unix
set fillchars=vert:\ ,stl:\ ,stlnc:\ ,fold:-,diff:┄
                                                 " Unicode chars for diffs/folds, and rely on
                                                 " Colors for window borders
silent! set foldmethod=marker                    " Use braces by default
set formatoptions=cqn1                           " t - autowrap normal text
                                                 " c - autowrap comments
                                                 " q - gq formats comments
                                                 " n - autowrap lists
                                                 " 1 - break _before_ single-letter words
                                                 " 2 - use indenting from 2nd line of para
set hidden                                       " Don't prompt to save hidden windows until exit
set history=200                                  " How many lines of history to save
set hlsearch                                     " Hilight searching
set ignorecase                                   " Case insensitive
set incsearch                                    " Search as you type
set infercase                                    " Completion recognizes capitalization
set laststatus=2                                 " Always show the status bar
set linebreak                                    " Break long lines by word, not char
set list                                         " Show whitespace as special chars - see listchars
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:· " Unicode characters for various things
set matchtime=2                                  " Tenths of second to hilight matching paren
set modelines=5                                  " How many lines of head & tail to look for ml's
set nobackup                                     " No backups left after done editing
set noerrorbells                                 " Don't beep
set nowritebackup                                " No backups made while editing
set number                                       " Always show line numbers
set printoptions=paper:letter                    " US paper
set ruler                                        " Show row/col and percentage
set scroll=4                                     " Number of lines to scroll with ^U/^D
set scrolloff=5                                  " Keep cursor away from this many chars top/bot
set sessionoptions-=options                      " Don't save runtimepath in Vim session (see tpope/vim-pathogen docs)
set shiftround                                   " Shift to certain columns, not just n spaces
set shiftwidth=4                                 " Number of spaces to shift for autoindent or >,<
" set shortmess+=A                               " Don't bother me when a swapfile exist
set showbreak=                                   " Show for lines that have been wrapped, like Emacs
set showmatch                                    " Highlight matching braces/parens/etc.
set sidescrolloff=3                              " Keep cursor away from this many chars left/right
set smartcase                                    " Ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab                                     " Insert tabs on the start of a line according to shiftwidth, not tabstop
set softtabstop=4                                " Spaces 'feel' like tabs
set suffixes+=.pyc,.beam                         " Ignore these files when tab-completing
set tabstop=2                                    " The One True Tab
set textwidth=120                                " 100 is the new 80
set thesaurus+=~/.vim/mthes10/mthesaur.txt
set title                                        " Change the terminal's title
set undolevels=10000                             " Use many muchos levels of undo
set visualbell t_vb=                             " No flashing or beeping at all
set wildmenu                                     " Show possible completions on command line
set wildmode=list:longest,full                   " List all options and complete
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.pyc                            " Python byte code
set wildignore+=**.class                         " Cursed Java class files
set wildignore+=*.beam                           " Erlang Beam files
set wildignore+=*~                               " Some program's swap file

" ------------------------------

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" I CAN HAZ NORMAL REGEXES?
" nnoremap / /\v
" vnoremap / /\v

" ------------------------------

" Mouse support
" silent! set mouse=nvc                          " Use the mouse, but not in insert mode
silent! set mouse=a                              " Enable mouse use in all modes

" ----------------------------------------------------------------------------
"  Some Key Maps
" ----------------------------------------------------------------------------

let mapleader = ','
let g:mapleader = ','

" Useful macros I use the most
" nmap \e :NERDTreeToggle<CR>                                       " Toggle nerdtree (require nerdtree plug-in)
" nmap \F :NERDTreeFind<CR>                                         " Find in nerdtree (require nerdtree plug-in)
" nmap \g :GitGutterToggle<CR>                                      " Toggle gitgutter (require gitgutter plug-in)
nmap \i vip:sort<CR>                                              " Sort a block of lines
nmap \l :setlocal number!<CR>:setlocal number?<CR>
nnoremap <silent> <leader>/ :nohlsearch<CR>                       " Get rid of search highlighting with ,/
nmap \s :setlocal invspell<CR>                                    " Spell check
" nnoremap <silent> <leader> :WhichKey ','<CR>

" Move between open buffers.
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" Emacs-like bindings in normal mode
nmap <C-x>0 <C-w>c
nmap <C-x>1 <C-w>o
nmap <C-x>1 <C-w>s
nmap <C-x>1 <C-w>v
nmap <C-x>o <C-w><C-w>
nmap <M-o>  <C-w><C-w>

" Emacs-like bindings in insert mode
imap <C-e> <C-o>$
imap <C-a> <C-o>0

" Emacs-like bindings in the command line from `:h emacs-keys`
cnoremap <C-a>  <Home>
cnoremap <C-b>  <Left>
cnoremap <C-f>  <Right>
cnoremap <C-d>  <Del>
cnoremap <C-e>  <End>
cnoremap <M-b>  <S-Left>
cnoremap <M-f>  <S-Right>
cnoremap <M-d>  <S-right><Delete>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>
cnoremap <Esc>d <S-right><Delete>
cnoremap <C-g>  <C-c>


" Resize split (panes) when window/terminal gets resize
augroup VIM_PLANE_RESIZE
    autocmd VimResized * :wincmd =
augroup END

" Fix annoyances in the QuickFix window, like scrolling too much
augroup FIX_ANNOYANCE
    autocmd FileType qf setlocal number nolist scrolloff=0
    autocmd Filetype qf wincmd J " Makes sure it's at the bottom of the vim window
augroup END


" ----------------------------------------------------------------------------
" CUSTOM COMMANDS AND FUNCTIONS
" ----------------------------------------------------------------------------

" Trim spaces at EOL and retab. I run `:CLEAN` a lot to clean up files.
command! TEOL %s/\s\+$//
command! CLEAN retab | TEOL

" Close all buffers except this one
command! BufCloseOthers %bd|e#

" Enter to buffer in the same position it was opened before (if previously was opened at all)
function! ResCur()
    if line("'\"") <= line('$')
        normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END


" ----------------------------------------------------------------------------
" PLUGIN SETTINGS
" ----------------------------------------------------------------------------

" For any plugins that use this, make their keymappings use comma
let mapleader = ','
let maplocalleader = ','

" FZF (Fuzzy search)
" set runtimepath+=~/.fzf
" nmap \\ :Buffers<CR>
" nmap <Leader>t :Files<CR>
" nmap <Leader>a :Ag<CR>

" FZF color scheme updater from https://github.com/junegunn/fzf.vim/issues/59
" function! s:update_fzf_colors()
"   let rules =
"   \ { 'fg':      [['Normal',       'fg']],
"     \ 'bg':      [['Normal',       'bg']],
"     \ 'hl':      [['String',       'fg']],
"     \ 'fg+':     [['CursorColumn', 'fg'], ['Normal', 'fg']],
"     \ 'bg+':     [['CursorColumn', 'bg']],
"     \ 'hl+':     [['String',       'fg']],
"     \ 'info':    [['PreProc',      'fg']],
"     \ 'prompt':  [['Conditional',  'fg']],
"     \ 'pointer': [['Exception',    'fg']],
"     \ 'marker':  [['Keyword',      'fg']],
"     \ 'spinner': [['Label',        'fg']],
"     \ 'header':  [['Comment',      'fg']] }
"   let cols = []
"   for [name, pairs] in items(rules)
"     for pair in pairs
"       let code = synIDattr(synIDtrans(hlID(pair[0])), pair[1])
"       if !empty(name) && code !=# ''
"         call add(cols, name.':'.code)
"         break
"       endif
"     endfor
"   endfor
"   let s:orig_fzf_default_opts = get(s:, 'orig_fzf_default_opts', $FZF_DEFAULT_OPTS)
"   let $FZF_DEFAULT_OPTS = s:orig_fzf_default_opts .
"         \ (empty(cols) ? '' : (' --color='.join(cols, ',')))
" endfunction

" augroup _fzf
"   autocmd!
"   autocmd VimEnter,ColorScheme * call <sid>update_fzf_colors()
" augroup END

" " Tell ack.vim to use ag (the Silver Searcher) instead
" let g:ackprg = 'ag --vimgrep'

" " GitGutter
" nmap ]g :GitGutterNextHunk<CR>
" nmap [g :GitGutterPrevHunk<CR>
" augroup VimDiff
"   autocmd!
"   autocmd VimEnter,FilterWritePre * if &diff | GitGutterDisable | endif
" augroup END

" " Use incsearch.vim to highlight as I search
" map /  <Plug>(incsearch-forward)
" map ?  <Plug>(incsearch-backward)
" map g/ <Plug>(incsearch-stay)

" " Highlight YAML frontmatter in Markdown files
let g:vim_markdown_frontmatter = 1

let g:lightline = {
\ 'colorscheme': 'wombat',
\ 'active': {
\   'left': [['mode', 'paste'], ['gitbranch', 'filename', 'modified']],
\   'right': [['lineinfo'], ['percent'], ['readonly']]
\ },
\ 'component_type': {
\   'readonly': 'error',
\ },
\ 'component_function': {
\   'gitbranch': 'fugitive#head'
\ }
\ }


" ----------------------------------------------------------------------------
" COLORS
" ----------------------------------------------------------------------------

" Make sure colored syntax mode is on, and make it Just Work with 256-color terminals.
" set termguicolors
set background=dark
silent! colorscheme iceberg
if !has('gui_running')
  let g:solarized_termcolors=256
  if $TERM ==# 'xterm-256color' || $TERM ==# 'screen-256color' || $COLORTERM ==# 'gnome-terminal' || $TERM ==# 'xterm-termite' || $TERM ==# 'mate-terminal'
    set t_Co=256
  elseif has('terminfo')
    colorscheme default
    set t_Co=8
    set t_Sf=[3%p1%dm
    set t_Sb=[4%p1%dm
  else
    colorscheme default
    set t_Co=8
    set t_Sf=[3%dm
    set t_Sb=[4%dm
  endif
  " Disable Background Color Erase when within tmux - https://stackoverflow.com/q/6427650/102704
  if $TMUX !=# ''
    set t_ut=
 endif
endif
syntax on

" taglist.vim's filenames is linked to LineNr by default, which is too dark
highlight def link MyTagListFileName Statement
highlight def link MyTagListTagName Question

" Turn off horrible coloring for CDATA in XML
highlight def link xmlCdata NONE

" Some custom spell-checking colors
highlight SpellBad     term=underline cterm=underline ctermbg=NONE ctermfg=205
highlight SpellCap     term=underline cterm=underline ctermbg=NONE ctermfg=33
highlight SpellRare    term=underline cterm=underline ctermbg=NONE ctermfg=217
highlight SpellLocal   term=underline cterm=underline ctermbg=NONE ctermfg=72

" The Ignore color should be... ignorable
silent! highlight Ignore cterm=bold ctermfg=black ctermbg=bg
highlight clear FoldColumn
highlight def link FoldColumn Ignore
highlight clear Folded
highlight link Folded Ignore
highlight clear LineNr
highlight LineNr ctermfg=239 guifg=#444b71
"highlight! def link LineNr Ignore

" Custom search colors
"highlight clear Search
"highlight Search term=NONE cterm=NONE ctermfg=white ctermbg=black

" Make hilighted matching parents less annoying
highlight clear MatchParen
highlight link MatchParen Search

" Custom colors for NERDTree
highlight def link NERDTreeRO NERDTreeFile

" Make trailing spaces very visible
highlight SpecialKey ctermbg=Yellow guibg=Yellow

" Make sure we highlight extra whitespace in the most annoying way possible.
highlight ExtraWhitespace ctermbg=Yellow guibg=Yellow
match ExtraWhitespace /\s\+$/
augroup ColorWhiteAnnoying
    " Previous approach for trailing white spaces
    autocmd ColorScheme * highlight ExtraWhitespace ctermbg=Yellow guibg=Yellow

    " new way?
    autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/
augroup END


" Make menu selections visible
highlight PmenuSel ctermfg=black ctermbg=magenta

" The sign column slows down remote terminals
highlight clear SignColumn
highlight link SignColumn Ignore

" Markdown could be more fruit salady
highlight link markdownH1 PreProc
highlight link markdownH2 PreProc
highlight link markdownLink Character
highlight link markdownBold String
highlight link markdownItalic Statement
highlight link markdownCode Delimiter
highlight link markdownCodeBlock Delimiter
highlight link markdownListMarker Todo

" highlight link erlangLocalFuncCall Statement
" highlight link erlangLocalFuncRef Statement
" highlight link erlangGlobalFuncCall Statement
" highlight link erlangGlobalFuncRef Statement

" highlight link erlangKeyword Constant
" highlight link erlangVariable Normal
highlight link erlangQuotedAtom Special
highlight link erlangAtom Function

" transparent background
hi Normal guibg=NONE ctermbg=NONE

" disable background color earse to to fix issue with background
set t_ut=

" ----------------------------------------------------------------------------
" FILE TYPE TRIGGERS
" ----------------------------------------------------------------------------

" Reset all autocommands
augroup vimrc
autocmd!

au BufNewFile,BufRead *.glsl    setf glsl
au BufNewFile,BufRead *.html    setlocal nocindent smartindent
au BufNewFile,BufRead *.ini     setf conf
au BufNewFile,BufRead *.json    set ft=json tw=0
au BufNewFile,BufRead *.less    setlocal ft=less nocindent smartindent
au BufNewFile,BufRead *.md      setlocal ft=markdown nolist spell
au BufNewFile,BufRead *.md,*.markdown setlocal foldlevel=999 tw=0 nocin
au BufNewFile,BufRead *.plist   setf xml
au BufNewFile,BufRead *.sass    setf sass
au BufNewFile,BufRead .git/config setlocal ft=gitconfig nolist ts=4 sw=4 noet
au BufNewFile,BufRead .gitconfig* setlocal ft=gitconfig nolist ts=4 sw=4 noet
au BufNewFile,BufRead .vimlocal,.gvimlocal setf vim
au BufNewFile,BufRead COMMIT_EDITMSG setlocal nolist nonumber
au BufNewFile,BufRead Makefile setlocal nolist noexpandtab

au FileType gitcommit setlocal nolist ts=4 sts=4 sw=4 noet
au FileType json setlocal conceallevel=0 foldmethod=syntax foldlevel=999
au FileType make setlocal nolist ts=4 sts=4 sw=4 noet
au FileType markdown syn sync fromstart
au Filetype gitcommit setlocal tw=80

augroup END


" Tell vim to remember certain things when we exit
" "  '10  :  marks will be remembered for up to 10 previously edited files
" "  "100 :  will save up to 100 lines for each register
" "  :20  :  up to 20 lines of command-line history will be remembered
" "  %    :  saves and restores the buffer list
" "  n... :  where to save the viminfo files
" set viminfo='10,\"100,:20,%,n~/.viminfo"'


" ----------------------------------------------------------------------------
" HOST-SPECIFIC VIM FILE
" ----------------------------------------------------------------------------

" Now load specifics to this host
if filereadable(expand('~/.vimlocal'))
  source ~/.vimlocal
endif

" Some plugin seems to search for something at startup, so this fixes that.
silent! nohlsearch

" vim:set tw=100:
