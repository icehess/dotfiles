"           _
"    __   _(_)_ __ ___  _ __ ___
"    \ \ / / | '_ ` _ \| '__/ __|
"  _  \ V /| | | | | | | | | (__
" |_|  \_/ |_|_| |_| |_|_|  \___|
"
" Icehess .vimrc file
" (Based on Ian's vimrc - https://github.com/statico/dotfiles)
" (https://statico.github.io/vim3.html)
"

set encoding=utf-8
scriptencoding utf-8
" nvim is always nocompatible
" set nocompatible               " be iMproved
filetype off                   " required!

" ----------------------------------------------------------------------------
"  Plug-ins
" ----------------------------------------------------------------------------

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  augroup PLUG_INSTALL
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  augroup END
endif

" set the runtime path to include Vundle and initialize
" set rtp+=~/.vim/bundle/Vundle.vim
call plug#begin('~/.vim/bundle')

" let Plug manage Plug
Plug 'junegunn/vim-plug'

" VCS
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-rhubarb'
Plug 'junegunn/gv.vim'

" Dev Utilities
Plug 'vim-scripts/Gist.vim' " Gist
Plug 'mileszs/ack.vim' " First configure to us ag
Plug 'w0rp/ale' " linter
Plug 'Raimondi/delimitMate' " auto closing qoutes, parenthesis, brackets
Plug 'junegunn/fzf' " file, command, history fuzzy searcher
Plug 'junegunn/fzf.vim' " file, command, history fuzzy searcher (required both plug-ins)
Plug 'junegunn/goyo.vim' " distraction free
Plug 'haya14busa/incsearch.vim' " incrementally highlights ALL pattern matches unlike default 'incsearch'
Plug 'scrooloose/nerdcommenter' " in command mode use ,cc ,cu
Plug 'rstacruz/sparkup' " css style HTML extender
Plug 'ervandew/supertab' " Use Tab to completion in insert mode
Plug 'majutsushi/tagbar' " Show tags (functions, ...) Use :TagbarToggle
Plug 'qpkorr/vim-bufkill' " Kill buffer withou closing win: :BUN :BD :BW and :BB
Plug 'tpope/vim-commentary' " in command mode use gcc
Plug 'tpope/vim-endwise' " end for,if, etc.. for most langs
Plug 'tpope/vim-eunuch' " helper for some UNIX command, :Move :Rename :Chmod
Plug 'terryma/vim-multiple-cursors' " sublime
Plug 'tpope/vim-surround' " add: ysw' remove: ds' change: cs}]
Plug 'MarcWeber/vim-addon-local-vimrc'

" Peekaboo will show you the contents of the registers on the sidebar
" when you hit " or @ in normal mode or <CTRL-R> in insert mode.
Plug 'junegunn/vim-peekaboo'

Plug 'liuchengxu/vim-which-key'

Plug 'troydm/zoomwintab.vim'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'valloric/vim-indent-guides'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'

" Syntaxes and such.
Plug 'ap/vim-css-color'
Plug 'sheerun/vim-polyglot'
Plug 'editorconfig/editorconfig-vim'

" languages
Plug 'vim-erlang/vim-erlang-tags'
Plug 'vim-erlang/vim-erlang-omnicomplete'
Plug 'vim-erlang/erlang-motions.vim'

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Use release branch (Recommend)
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Plug 'hyhugh/coc-erlang_ls', {'do': 'yarn install --frozen-lockfile'}

" Look and feel
Plug 'cocopon/iceberg.vim'
Plug 'haishanh/night-owl.vim'
Plug 'vim-erlang/vim-compot'
"Plug 'arcticicestudio/nord-vim'
"Plug 'felixhummel/setcolors.vim'
Plug 'altercation/vim-colors-solarized'

Plug 'itchyny/lightline.vim'

" All of your Plugins must be added before the following line
call plug#end()            " required
"filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" ----------------------------------------------------------------------------
"  General Configurations
" ----------------------------------------------------------------------------

" enable project specific config file in secure way(?)
" (use vim-addon-local-vimrc plugin and put .settings in tour project folder instead)
" set exrc
" set secure
set autoindent                                   " Carry over indenting from previous line
set autoread                                     " Don't bother me hen a file changes
set autowrite                                    " Write on :next/:prev/^Z
set backspace=indent,eol,start                   " Allow backspace beyond insertion point
set cindent                                      " Automatic program indenting
set cinkeys-=0#                                  " Comments don't fiddle with indenting
set cinoptions=                                  " See :h cinoptions-values
set clipboard=unnamed                            " Share system clipboard
set commentstring=\ \ #%s                        " When folds are created, add them to this
set copyindent                                   " Make autoindent use the same chars as prev autoindented line
set cursorline                                   " Highlight current line
set directory-=/tmp                              " Don't store temp files in cwd
set expandtab                                    " No tabs
set fileformats=unix,dos,mac                     " Prefer Unix
set fillchars=vert:\ ,stl:\ ,stlnc:\ ,fold:-,diff:┄
                                                 " Unicode chars for diffs/folds, and rely on
                                                 " Colors for window borders
silent! set foldmethod=marker                    " Use braces by default
set formatoptions=cqn1                           " t - autowrap normal text
                                                 " c - autowrap comments
                                                 " q - gq formats comments
                                                 " n - autowrap lists
                                                 " 1 - break _before_ single-letter words
                                                 " 2 - use indenting from 2nd line of para
set hidden                                       " Don't prompt to save hidden windows until exit
set history=200                                  " How many lines of history to save
set hlsearch                                     " Hilight searching
set ignorecase                                   " Case insensitive
set incsearch                                    " Search as you type
set infercase                                    " Completion recognizes capitalization
set laststatus=2                                 " Always show the status bar
set linebreak                                    " Break long lines by word, not char
set list                                         " Show whitespace as special chars - see listchars
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:· " Unicode characters for various things
set matchtime=2                                  " Tenths of second to hilight matching paren
set modelines=5                                  " How many lines of head & tail to look for ml's
set nobackup                                     " No backups left after done editing
set noerrorbells                                 " Don't beep
set nowritebackup                                " No backups made while editing
set number                                       " Always show line numbers
set printoptions=paper:letter                    " US paper
set ruler                                        " Show row/col and percentage
set scroll=4                                     " Number of lines to scroll with ^U/^D
set scrolloff=5                                  " Keep cursor away from this many chars top/bot
set sessionoptions-=options                      " Don't save runtimepath in Vim session (see tpope/vim-pathogen docs)
set shiftround                                   " Shift to certain columns, not just n spaces
set shiftwidth=4                                 " Number of spaces to shift for autoindent or >,<
" set shortmess+=A                               " Don't bother me when a swapfile exist
set showbreak=                                   " Show for lines that have been wrapped, like Emacs
set showmatch                                    " Highlight matching braces/parens/etc.
set sidescrolloff=3                              " Keep cursor away from this many chars left/right
set smartcase                                    " Ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab                                     " Insert tabs on the start of a line according to shiftwidth, not tabstop
set softtabstop=4                                " Spaces 'feel' like tabs
set suffixes+=.pyc,.beam                         " Ignore these files when tab-completing
set tabstop=2                                    " The One True Tab
set textwidth=120                                " 100 is the new 80
set thesaurus+=~/.vim/mthes10/mthesaur.txt
set title                                        " Change the terminal's title
set undolevels=10000                             " Use many muchos levels of undo
set visualbell t_vb=                             " No flashing or beeping at all
set wildmenu                                     " Show possible completions on command line
set wildmode=list:longest,full                   " List all options and complete
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.pyc                            " Python byte code
set wildignore+=**.class                         " Cursed Java class files
set wildignore+=*.beam                           " Erlang Beam files
set wildignore+=*~                               " Some program's swap file

" ------------------------------

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" I CAN HAZ NORMAL REGEXES?
" nnoremap / /\v
" vnoremap / /\v

" ------------------------------

" Mouse support
" silent! set mouse=nvc                          " Use the mouse, but not in insert mode
silent! set mouse=a                              " Enable mouse use in all modes
" set ttyfast                                    " Send more characters for redraws
" set ttymouse=xterm2                            " Set this to the name of your terminal that supports mouse codes.
                                                 " - Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm

" ----------------------------------------------------------------------------
"  Some Key Maps
" ----------------------------------------------------------------------------

let mapleader = ','
let g:mapleader = ','

" Useful macros I use the most
nmap \A :set formatoptions+=a<CR>:echo "autowrap enabled"<CR>     " Turn-on Autowarp
nmap \T :set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4<CR> " Use Tab instead of space
nmap \a :set formatoptions-=a<CR>:echo "autowrap disabled"<CR>    " Turn-on Autowarp
nmap \d :ALEToggleBuffer<CR>                                      " Toggle ALE (require ale plug-in)
nmap \e :NERDTreeToggle<CR>                                       " Toggle nerdtree (require nerdtree plug-in)
nmap \f mt:Goyo<CR>'tzz                                           " Toggle distraction free (require goyo plug-in)
nmap \F :NERDTreeFind<CR>                                         " Find in nerdtree (require nerdtree plug-in)
nmap \g :GitGutterToggle<CR>                                      " Toggle gitgutter (require gitgutter plug-in)
nmap \i vip:sort<CR>                                              " Sort a block of lines
nmap \l :setlocal number!<CR>:setlocal number?<CR>
nmap \p :ProseMode<CR>                                            " ProseMode (see function section) distraction free (require goyo plug-in)
nnoremap <silent> <leader>/ :nohlsearch<CR>                       " Get rid of search highlighting with ,/
nmap \s :setlocal invspell<CR>                                    " Spell check
nmap \t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>   " Use space instead of Tab
nnoremap <silent> <leader> :WhichKey ','<CR>

nmap <C-e> :e#<CR>                                                " Replace the current buffer with previously edited file

" Move between open buffers.
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" Emacs-like bindings in normal mode
nmap <C-x>0 <C-w>c
nmap <C-x>1 <C-w>o
nmap <C-x>1 <C-w>s
nmap <C-x>1 <C-w>v
nmap <C-x>o <C-w><C-w>
nmap <M-o>  <C-w><C-w>

" Emacs-like bindings in insert mode
imap <C-e> <C-o>$
imap <C-a> <C-o>0

" Emacs-like bindings in the command line from `:h emacs-keys`
cnoremap <C-a>  <Home>
cnoremap <C-b>  <Left>
cnoremap <C-f>  <Right>
cnoremap <C-d>  <Del>
cnoremap <C-e>  <End>
cnoremap <M-b>  <S-Left>
cnoremap <M-f>  <S-Right>
cnoremap <M-d>  <S-right><Delete>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>
cnoremap <Esc>d <S-right><Delete>
cnoremap <C-g>  <C-c>


" Resize split (panes) when window/terminal gets resize
augroup VIM_PLANE_RESIZE
    autocmd VimResized * :wincmd =
augroup END


" Search for the word under the cursor in the current directory
nmap <M-k>    mo:Ack! "\b<cword>\b" <CR>
nmap <Esc>k   mo:Ack! "\b<cword>\b" <CR>


" Alt-W to delete a buffer and remove it from the list but keep the window via bufkill.vim
nmap <Esc>w :BD<CR>
nmap <M-w>  :BD<CR>


" Fix annoyances in the QuickFix window, like scrolling too much
augroup FIX_ANNOYANCE
    autocmd FileType qf setlocal number nolist scrolloff=0
    autocmd Filetype qf wincmd J " Makes sure it's at the bottom of the vim window
augroup END

" autocompletion (omni completion)
filetype plugin on
set omnifunc=syntaxcomplete#Complete

" ----------------------------------------------------------------------------
" CUSTOM COMMANDS AND FUNCTIONS
" ----------------------------------------------------------------------------

let g:local_vimrc = {'names':['.settings'],'hash_fun':'LVRHashOfFile'}

" Trim spaces at EOL and retab. I run `:CLEAN` a lot to clean up files.
command! TEOL %s/\s\+$//
command! CLEAN retab | TEOL

" Close all buffers except this one
command! BufCloseOthers %bd|e#

" Enter to buffer in the same position it was opened before (if previously was opened at all)
function! ResCur()
    if line("'\"") <= line('$')
        normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END


" ----------------------------------------------------------------------------
" PLUGIN SETTINGS
" ----------------------------------------------------------------------------

" For any plugins that use this, make their keymappings use comma
let mapleader = ','
let maplocalleader = ','

" FZF (Fuzzy search)
set runtimepath+=~/.fzf
nmap \\ :Buffers<CR>
nmap <Leader>r :Tags<CR>
nmap <Leader>t :Files<CR>
nmap <Leader>a :Ag<CR>
nmap <Leader>c :Colors<CR>

" FZF color scheme updater from https://github.com/junegunn/fzf.vim/issues/59
function! s:update_fzf_colors()
  let rules =
  \ { 'fg':      [['Normal',       'fg']],
    \ 'bg':      [['Normal',       'bg']],
    \ 'hl':      [['String',       'fg']],
    \ 'fg+':     [['CursorColumn', 'fg'], ['Normal', 'fg']],
    \ 'bg+':     [['CursorColumn', 'bg']],
    \ 'hl+':     [['String',       'fg']],
    \ 'info':    [['PreProc',      'fg']],
    \ 'prompt':  [['Conditional',  'fg']],
    \ 'pointer': [['Exception',    'fg']],
    \ 'marker':  [['Keyword',      'fg']],
    \ 'spinner': [['Label',        'fg']],
    \ 'header':  [['Comment',      'fg']] }
  let cols = []
  for [name, pairs] in items(rules)
    for pair in pairs
      let code = synIDattr(synIDtrans(hlID(pair[0])), pair[1])
      if !empty(name) && code !=# ''
        call add(cols, name.':'.code)
        break
      endif
    endfor
  endfor
  let s:orig_fzf_default_opts = get(s:, 'orig_fzf_default_opts', $FZF_DEFAULT_OPTS)
  let $FZF_DEFAULT_OPTS = s:orig_fzf_default_opts .
        \ (empty(cols) ? '' : (' --color='.join(cols, ',')))
endfunction

augroup _fzf
  autocmd!
  autocmd VimEnter,ColorScheme * call <sid>update_fzf_colors()
augroup END

" Tell ack.vim to use ag (the Silver Searcher) instead
let g:ackprg = 'ag --vimgrep'

" GitGutter
nmap ]g :GitGutterNextHunk<CR>
nmap [g :GitGutterPrevHunk<CR>
augroup VimDiff
  autocmd!
  autocmd VimEnter,FilterWritePre * if &diff | GitGutterDisable | endif
augroup END

" Use incsearch.vim to highlight as I search
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Highlight YAML frontmatter in Markdown files
let g:vim_markdown_frontmatter = 1

" ALE
" let g:ale_sign_warning = '▲'
" let g:ale_sign_error = '✗'
"highlight link ALEWarningSign String
" highlight link ALEErrorSign Title
nmap ]l :ALENextWrap<CR>
nmap [l :ALEPreviousWrap<CR>
augroup VimDiff
    autocmd!
    autocmd VimEnter,FilterWritePre * if &diff | ALEDisable | endif
augroup END

" Lightline
function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction
function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction
function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

" Update and show lightline but only if it's visible (e.g., not in Goyo)
augroup UPDATE_LIGHTLINE_ALE
    autocmd User ALELint call s:MaybeUpdateLightline()
augroup END
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

let g:lightline = {
\ 'colorscheme': 'wombat',
\ 'active': {
\   'left': [['mode', 'paste'], ['gitbranch', 'filename', 'modified']],
\   'right': [['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK'
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error'
\ },
\ 'component_function': {
\   'gitbranch': 'fugitive#head'
\ }
\ }

" Sparkup
let g:sparkupExecuteMapping = '<c-y>'
let g:sparkupNextMapping = '<c-k>'


" ----------------------------------------------------------------------------
" COLORS
" ----------------------------------------------------------------------------

syntax enable
" set background=dark

" Make sure colored syntax mode is on, and make it Just Work with 256-color terminals.
" set termguicolors
colorscheme iceberg
" colorscheme night-owl
" colorscheme compot

if !has('gui_running')
  let g:solarized_termcolors=256
  if $TERM ==# 'xterm-256color' || $TERM ==# 'screen-256color' || $COLORTERM ==# 'gnome-terminal' || $TERM ==# 'xterm-termite' || $TERM ==# 'mate-terminal'
    set t_Co=256

  elseif has('terminfo')
    colorscheme default
    set t_Co=8
    set t_Sf=[3%p1%dm
    set t_Sb=[4%p1%dm
  else
    colorscheme default
    set t_Co=8
    set t_Sf=[3%dm
    set t_Sb=[4%dm
  endif
  " Disable Background Color Erase when within tmux - https://stackoverflow.com/q/6427650/102704
  if $TMUX !=# ''
    set t_ut=
 endif
endif

"" taglist.vim's filenames is linked to LineNr by default, which is too dark
" highlight def link MyTagListFileName Statement
" highlight def link MyTagListTagName Question

"" Turn off horrible coloring for CDATA in XML
" highlight def link xmlCdata NONE

"" Some custom spell-checking colors
" highlight SpellBad     term=underline cterm=underline ctermbg=NONE ctermfg=205
" highlight SpellCap     term=underline cterm=underline ctermbg=NONE ctermfg=33
" highlight SpellRare    term=underline cterm=underline ctermbg=NONE ctermfg=217
" highlight SpellLocal   term=underline cterm=underline ctermbg=NONE ctermfg=72

"" The Ignore color should be... ignorable
" silent! highlight Ignore cterm=bold ctermfg=black ctermbg=bg
" highlight clear FoldColumn
" highlight def link FoldColumn Ignore
" highlight clear Folded
" highlight link Folded Ignore
" highlight clear LineNr
" highlight LineNr ctermfg=239 guifg=#444b71
" highlight! def link LineNr Ignore

"" Custom search colors
" highlight clear Search
" highlight Search term=NONE cterm=NONE ctermfg=white ctermbg=black

"" Make hilighted matching parents less annoying
" highlight clear MatchParen
" highlight link MatchParen Search

"" Custom colors for NERDTree
" highlight def link NERDTreeRO NERDTreeFile

"" Make trailing spaces very visible
highlight SpecialKey ctermbg=Yellow guibg=Yellow

"" Make sure we highlight extra whitespace in the most annoying way possible.
highlight ExtraWhitespace ctermbg=Yellow guibg=Yellow
match ExtraWhitespace /\s\+$/
augroup ColorWhiteAnnoying
    " Previous approach for trailing white spaces
    autocmd ColorScheme * highlight ExtraWhitespace ctermbg=Yellow guibg=Yellow

    " new way?
    autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/
augroup END

"" Make menu selections visible
" highlight PmenuSel ctermfg=black ctermbg=magenta

"" The sign column slows down remote terminals
highlight clear SignColumn
highlight link SignColumn Ignore

"" Markdown could be more fruit salady
" highlight link markdownH1 PreProc
" highlight link markdownH2 PreProc
" highlight link markdownLink Character
" highlight link markdownBold String
" highlight link markdownItalic Statement
" highlight link markdownCode Delimiter
" highlight link markdownCodeBlock Delimiter
" highlight link markdownListMarker Todo

"" Erlang my-luv
" highlight link erlangLocalFuncCall Statement
" highlight link erlangLocalFuncRef Statement
" highlight link erlangGlobalFuncCall Statement
" highlight link erlangGlobalFuncRef Statement

" highlight link erlangKeyword Constant
" highlight link erlangVariable Normal
highlight link erlangQuotedAtom Special
highlight link erlangAtom Function

"" Custom mode for distraction-free editing
function! ProseMode()
  call goyo#execute(0, [])
  set spell noci nosi noai nolist noshowmode noshowcmd
  set complete+=s
  set background=light
  colors solarized
endfunction
command! ProseMode call ProseMode()

"" transparent background
" hi Normal guibg=NONE ctermbg=NONE

"" disable background color earse to to fix issue with background
"set t_ut=

" ----------------------------------------------------------------------------
" FILE TYPE TRIGGERS
" ----------------------------------------------------------------------------

" Reset all autocommands
augroup vimrc
autocmd!

au BufNewFile,BufRead *.glsl    setf glsl
au BufNewFile,BufRead *.html    setlocal nocindent smartindent nowrap
au BufNewFile,BufRead *.ini     setf conf
au BufNewFile,BufRead *.json    set ft=json tw=0
au BufNewFile,BufRead *.less    setlocal ft=less nocindent smartindent
au BufNewFile,BufRead *.md      setlocal ft=markdown nolist spell
au BufNewFile,BufRead *.md,*.markdown setlocal foldlevel=999 tw=0 nocin
au BufNewFile,BufRead *.plist   setf xml
au BufNewFile,BufRead *.sass    setf sass
au BufNewFile,BufRead .git/config setlocal ft=gitconfig nolist ts=4 sw=4 noet
au BufNewFile,BufRead .gitconfig* setlocal ft=gitconfig nolist ts=4 sw=4 noet
au BufNewFile,BufRead .vimlocal,.gvimlocal setf vim
au BufNewFile,BufRead COMMIT_EDITMSG setlocal nolist nonumber
au BufNewFile,BufRead Makefile setlocal nolist noexpandtab

au FileType gitcommit setlocal nolist ts=4 sts=4 sw=4 noet
au FileType json setlocal conceallevel=0 foldmethod=syntax foldlevel=999
au FileType make setlocal nolist ts=4 sts=4 sw=4 noet
au FileType markdown syn sync fromstart
au Filetype gitcommit setlocal tw=80

augroup END

" -----------------------------------------------------------------------------
" Coc Settings
" -----------------------------------------------------------------------------
" " TextEdit might fail if hidden is not set.
" set hidden

" " Some servers have issues with backup files, see #649.
" set nobackup
" set nowritebackup

" " Give more space for displaying messages.
" set cmdheight=2

" " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" " delays and poor user experience.
" set updatetime=300

" " Don't pass messages to |ins-completion-menu|.
" set shortmess+=c

" " Always show the signcolumn, otherwise it would shift the text each time
" " diagnostics appear/become resolved.
" set signcolumn=yes

" " Use tab for trigger completion with characters ahead and navigate.
" " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" " other plugin before putting this into your config.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" " Use <c-space> to trigger completion.
" inoremap <silent><expr> <c-space> coc#refresh()

" " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" " position. Coc only does snippet and additional edit on confirm.
" " if has('patch8.1.1068')
" "   " Use `complete_info` if your (Neo)Vim version supports it.
" "   inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
" " else
" "   imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" " endif

" " Use `[g` and `]g` to navigate diagnostics
" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)

" " GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)

" " Use K to show documentation in preview window.
" nnoremap <silent> K :call <SID>show_documentation()<CR>

" function! s:show_documentation()
"   if (index(['vim','help'], &filetype) >= 0)
"     execute 'h '.expand('<cword>')
"   else
"     call CocAction('doHover')
"   endif
" endfunction

" " Highlight the symbol and its references when holding the cursor.
" autocmd CursorHold * silent call CocActionAsync('highlight')

" " Symbol renaming.
" nmap <leader>rn <Plug>(coc-rename)

" " Formatting selected code.
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

" augroup mygroup
"   autocmd!
"   " Setup formatexpr specified filetype(s).
"   autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"   " Update signature help on jump placeholder.
"   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
" augroup end

" " Applying codeAction to the selected region.
" " Example: `<leader>aap` for current paragraph
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" " Remap keys for applying codeAction to the current line.
" nmap <leader>ac  <Plug>(coc-codeaction)
" " Apply AutoFix to problem on the current line.
" nmap <leader>qf  <Plug>(coc-fix-current)

" " Introduce function text object
" " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
" xmap if <Plug>(coc-funcobj-i)
" xmap af <Plug>(coc-funcobj-a)
" omap if <Plug>(coc-funcobj-i)
" omap af <Plug>(coc-funcobj-a)

" " Use <TAB> for selections ranges.
" " NOTE: Requires 'textDocument/selectionRange' support from the language server.
" " coc-tsserver, coc-python are the examples of servers that support it.
" nmap <silent> <TAB> <Plug>(coc-range-select)
" xmap <silent> <TAB> <Plug>(coc-range-select)

" " Add `:Format` command to format current buffer.
" command! -nargs=0 Format :call CocAction('format')

" " Add `:Fold` command to fold current buffer.
" command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" " Add `:OR` command for organize imports of the current buffer.
" command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" " Add (Neo)Vim's native statusline support.
" " NOTE: Please see `:h coc-status` for integrations with external plugins that
" " provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" " Mappings using CoCList:
" " Show all diagnostics.
" nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" " Manage extensions.
" nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" " Show commands.
" nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" " Find symbol of current document.
" nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" " Search workspace symbols.
" nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" " Do default action for next item.
" nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" " Do default action for previous item.
" nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" " Resume latest coc list.
" nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" Tell vim to remember certain things when we exit
" "  '10  :  marks will be remembered for up to 10 previously edited files
" "  "100 :  will save up to 100 lines for each register
" "  :20  :  up to 20 lines of command-line history will be remembered
" "  %    :  saves and restores the buffer list
" "  n... :  where to save the viminfo files
" set viminfo='10,\"100,:20,%,n~/.viminfo"'


" ----------------------------------------------------------------------------
" HOST-SPECIFIC VIM FILE
" ----------------------------------------------------------------------------

" Now load specifics to this host
if filereadable(expand('~/.vimlocal'))
  source ~/.vimlocal
endif

" Some plugin seems to search for something at startup, so this fixes that.
silent! nohlsearch

" vim:set tw=100:
